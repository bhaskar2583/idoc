@model IEnumerable<IBS.Core.Models.CommisionModel>

@{
    ViewBag.Title = "Index";
}
@using (Html.BeginForm())
{
    <div class="row col-md-12">
        <h2>
            Commisions
        </h2>
        <hr />
    </div>

    <div class="row">

        <div class="col-md-6">
            <div class="form-group">
                <label>Carrier</label>
                @Html.DropDownList(
                "ddlCarrier",
                new SelectList(ViewBag.Carriers, "Id", "Name"),
                "-- Please select a carrier --", new { @class = "ibs-input ibs-border" }
                )
                <input id="btnSerchVisits" type="button" value="Search Visits" class="btn btn-success" style="margin-top:10px" />
            </div>
        </div>

    </div>


    <div class="row">

        <div class="col-md-6">
            <div class="form-group">
                <label>Statement Date:</label>
                <input type="text" id="txtStatementDate" class="ibs-input ibs-border" />
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                <label>Payment Id</label>
                <input type="text" id="txtPaymentIdNew" class="ibs-input ibs-border" />
            </div>
        </div>
    </div>

    <div class="row" style="text-align:right">

        <input id="btnCancel" type="button" value="Cancel" class="btn btn-success" style="margin-top:10px" />

    </div>

    <div class="row">
        <div class="col-md-12" style="color:green">
            <div class="form-group">
                @ViewBag.PersistMessage
            </div>
        </div>
    </div>
    <table class="table" id="tblCommisions">
        <thead class="thead-dark lbl-grid-head">
            <tr>
                <th>
                    Client
                </th>
                <th style="display:none">
                    Department
                </th>
                <th>
                    Policy #
                </th>
                <th>
                    Coverage
                </th>
                <th>
                    Product
                </th>
                <th>
                    Commission
                </th>
                <th>
                    Commission Total
                </th>
                <th>
                    Applied Date
                </th>
                <th style="display:none">
                    Payment Id
                </th>
                <th>

                </th>

                <th></th>
            </tr>
        </thead>
        @foreach (var item in Model.Select((x, i) => new { Data = x, Index = i }))
        {

        <tr class="lbl-grid">
            <td>
                @Html.HiddenFor(modelItem => item.Data.ClientId)
                @Html.HiddenFor(modelItem => item.Data.PolicyId)
                @Html.HiddenFor(modelItem => item.Data.CoverageId)
                @Html.HiddenFor(modelItem => item.Data.ClientPolicyId)
                @Html.DisplayFor(modelItem => item.Data.CleintName)
                @Html.HiddenFor(modelItem => item.Data.StatementDate)
                @Html.HiddenFor(modelItem => item.Data.CarrierId)
                @Html.HiddenFor(modelItem => item.Data.Status)
                @Html.HiddenFor(modelItem => item.Data.PolicyNumber)
                @Html.HiddenFor(modelItem => item.Data.SelectedCoverage.Id)

                @Html.HiddenFor(modelItem => item.Data.Coverages.Count)
                @Html.HiddenFor(modelItem => item.Data.SelectedProduct.Id)
            </td>
            <td style="display:none">
                @Html.DisplayFor(modelItem => item.Data.DivisionName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Data.PolicyNumber)
            </td>
            <td>
                <div>
                    ---
                </div>
                @*@Html.DropDownListFor(
            modelItem => item.Data.SelectedCoverage.Id,
            new SelectList(item.Data.Coverages, "Id", "Name"), "-- Select Coverage --", new { id = "coverage" + item.Index, @class = "grid-select-height" }
            )*@
            </td>
            <td>

                @Html.DropDownListFor(
                 modelItem => item.Data.SelectedProduct.Id,
                 new SelectList(item.Data.CorporateProducts, "Id", "Name"), "-- Select Product--", new { id = "product" + item.Index, @class = "grid-select-height" }
                 )
            </td>

            <td style="width:15%">
                @Html.TextBoxFor(modelItem => item.Data.CommisionString, new { id = "CommisionValue" + item.Index, @class = "ibs-input-24height ibs-border" })
            </td>

            @*<td>
            @Html.DropDownListFor(
           modelItem => item.Data.Status,
           new SelectList(ViewBag.Status), "-- Select Status --", new { id = "status" + item.Index, @class = "grid-select-height" }
           )
        </td>*@
            <td style="width:15%">
                @Html.TextBoxFor(modelItem => item.Data.CommisionValue, new { id = "CommisionTotal" + item.Index, @class = "ibs-input-24height ibs-border" })
            </td>
            <td>
                @Html.TextBoxFor(modelItem => item.Data.AppliedDate, new { id = "txtAppliedDate" + item.Index, @class = "ibs-input-24height ibs-border" })<br />
                <span>MM/YYYY(12/2018)</span>
            </td>
            <td style="display:none">
                @Html.TextBoxFor(modelItem => item.Data.PaymentId, new { id = "PaymentId" + item.Index, @class = "ibs-input-24height ibs-border" })
            </td>

            <td>
                <a id="anchEdit" onclick="addRow(this)">Add</a>|
                <a id="anchDelete" onclick="deleteRow(this)">Delete</a> |
            </td>
        </tr>
        }
    </table>
    <div class="row">

        <div class="col-md-6">
            <div class="form-group">
                <input id="btnSubmit" type="button" value="Save" class="btn btn-primary" />
            </div>
        </div>

    </div>
    <script type="text/javascript">
        $(function () {
            $("#txtStatementDate").datepicker();
            $(".datepickercss").datepicker();
        });
        $("#btnSerchVisits").click(function () {
            var carrier = $("#ddlCarrier").val();
            if (carrier == "") {
                alert("please select carrier");
                return;
            }
            window.location.href = window.location.origin + window.location.pathname + "?carrierId=" + carrier
        });
        function addRow(instance) {
            var $tr = $(instance).closest('tr');
            var $clone = $tr.clone();
            var clientId = $tr[0].cells[0].childNodes[1].value;
            var policyid = $tr[0].cells[0].childNodes[3].value;
            var policyNo = $tr[0].cells[0].childNodes[15].value;
            var coverages = $tr[0].cells[0].childNodes[19].value;
            var count = 0;
            $('#tblCommisions > tbody  > tr').each(function () {
                if ($(this)[0].cells[0].childNodes[15] != undefined) {
                    var cliId = $(this)[0].cells[0].childNodes[1].value;
                    var polNo = $(this)[0].cells[0].childNodes[15].value;
                    if (clientId == cliId && policyNo == polNo) {
                        count = count + 1;
                    }
                }

            });
            //if (count >= coverages) {
            //    alert('Could not add extra row it reached max coverages count');
            //    return;
            //}
            $clone.find(':text').val('');
            $clone[0].cells[9].innerHTML = $clone[0].cells[9].innerHTML.replace('|', '');
            $clone[0].cells[9].innerHTML = $clone[0].cells[9].innerHTML.replace('Add', '');
            $clone.attr('newid', clientId + policyid);
            $tr.after($clone);
        }
        function deleteRow(instance) {
            var $tr = $(instance).closest('tr');
            var oClientId = $tr[0].cells[0].childNodes[1].value;
            var oPolicyid = $tr[0].cells[0].childNodes[3].value;
            var isaddedRow = $tr.attr('newid');
            if (isaddedRow) {
                $tr.remove();
                var commisionTotal = 0.00;
                $("[id*=CommisionTotal]").each(function () {
                    if ($(this).val() != "") {
                        var cT = parseFloat($(this).val());
                        commisionTotal = commisionTotal + cT;
                    }
                });

                commisionTotal = parseFloat(commisionTotal).toFixed(2);
                $("#tdTotal").text(commisionTotal);

            } else {
                alert('You cannot delete initial rows');
            }
        }
        $(document).on('change', "[id*=coverage]", function () {
            var $tr = $(this).closest('tr');
            var $clone = $tr.clone();
            var clientId = $tr[0].cells[0].childNodes[1].value;
            var policyNo = $tr[0].cells[0].childNodes[15].value;
            var coverages = $(this).val();
            let host = window.location.origin;
            let apiPath = host + "/Commision";
            var isProd = false;
            if (isProd) {
                host = window.location.origin;
                apiPath = host + "/IBS/Commision";
            }
            $.ajax({
                type: "POST",
                url: apiPath + "/ProductsOfPolicy ? client = " + clientId + " & policyNo=" + policyNo + "& coverage=" + coverages,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (data) {
                    console.log(data);
                    var product = $tr[0].cells[4].childNodes[1];
                    $(product).empty();
                    $(product).append($("<option></option>").val("").html("--Select--"))
                    for (var i = 0; i < data.length; i++) {
                        $(product).append($("<option></option>").val(data[i].Id).html(data[i].Name));
                    }
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    console.log(errorThrown);
                }
            });
        });
        $(document).on('change', "[id*=product]", function () {
            var $tr = $(this).closest('tr');
            var $clone = $tr.clone();
            var clientId = $tr[0].cells[0].childNodes[1].value;
            var policyNo = $tr[0].cells[0].childNodes[15].value;
            var coveargeCell = $tr[0].cells[3].childNodes[1];
            var product = $(this).val();
            if (product == "") {
                coveargeCell.textContent = "---";
                return;
            }
            //var coverages = $(this).val();
            let host = window.location.origin;
            let apiPath = host + "/Commision";
            var isProd = false;
            if (isProd) {
                host = window.location.origin;
                apiPath = host + "/IBS/Commision";
            }
            $.ajax({
                type: "POST",
                url: apiPath + "/GetCoverage?productId=" + product,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (data) {
                    console.log(data);
                    var covearge = $tr[0].cells[3].childNodes[1];
                    //$(covearge).innerHTML = data.Name;
                    covearge.textContent = data.Name;
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    console.log(errorThrown);
                }
            });
        });

        function Total() {
            commisionTotal = 0;
            $("[id*=CommisionValue]").each(function () {
                var cTotal = 0;
                var cTotalS = 0;
                if ($(this).val() != "") {

                    var allDataA = $(this).val().split('(');
                    var values = allDataA.length >= 1 ? allDataA[0].split('+') : 0.00;
                    var valuesS = allDataA.length >= 2 ? allDataA[1].replace(')',"").split('-') : 0.00;
                    cTotal = 0;
                    for (var i = 0; i < values.length; i++) {
                        cTotal = parseFloat(parseFloat(cTotal).toFixed(2)) + parseFloat(parseFloat(values[i]).toFixed(2));
                    }

                    cTotalS = 0;
                    for (var i = 0; i < valuesS.length; i++) {
                        cTotalS = parseFloat(parseFloat(cTotalS).toFixed(2)) + parseFloat(parseFloat(valuesS[i]).toFixed(2));
                    }
                    cTotalS= parseFloat(cTotalS).toFixed(2);
                }

                var cT = parseFloat(parseFloat(cTotal).toFixed(2)) - parseFloat(parseFloat(cTotalS).toFixed(2));
                cT = parseFloat(cT).toFixed(2);
                if (cT != "0.00")
                    $(this).closest('tr')[0].cells[6].childNodes[1].value = cT;
            });

            $("[id*=CommisionTotal]").each(function () {
                if ($(this).val() != "") {
                    var cT = parseFloat($(this).val());
                    commisionTotal = commisionTotal + cT;
                }
            });

            commisionTotal = parseFloat(commisionTotal).toFixed(2);
            $("#tdTotal").text(commisionTotal);
        }
        $(document).on('blur', '[id*=CommisionValue]', function () {
            Total();
        });
        $(document).on('blur', '[id*=CommisionTotal]', function () {
            Total();
        });

        $(document).ready(function () {

            var index = 0;
            $('#tblCommisions > tbody  > tr').each(function () {
                if ($(this)[0].cells[0].childNodes[9] != undefined) {
                    var statementDate = $(this)[0].cells[0].childNodes[9].value;
                    $("#txtStatementDate").val(statementDate);
                    var ststus = $(this)[0].cells[0].childNodes[13].value;
                    $("#status" + index).val(ststus);
                    var coverage = $(this)[0].cells[0].childNodes[17].value;
                    if (coverage != "0") {
                        $("#coverage" + index).val(coverage);
                    }
                    var product = $(this)[0].cells[0].childNodes[21].value;
                    if (product != "0") {
                        $("#product" + index).val(product);
                    }
                    index++;
                    return;
                }
            });
            var commisionTotal = parseFloat(0);
            //$("[id*=CommisionValue]").blur(function () {
                
            //});
            $("[id*=CommisionTotal]").each(function () {
                if ($(this).val() != "") {
                    var cT = parseFloat($(this).val());
                    commisionTotal = commisionTotal + cT;
                }
            });
            commisionTotal = parseFloat(commisionTotal).toFixed(2);
            $('#tblCommisions tr:last').after("<tr><td colspan='5'></td><td style='text-align:right'>Total Commissions</td><td id='tdTotal'>" + commisionTotal + "</td></tr>");
            var query = window.location.search;
            debugger;
            if (query != undefined && query != "") {
                var searchQuery = query.split('&');
                var queryArray = searchQuery[0].split('=');
                if (queryArray[0].indexOf("carrierId") != -1) {
                    if (queryArray[1] != "0") {
                        $("#ddlCarrier").val(queryArray[1]);
                    }
                }
                if (searchQuery.length > 1) {
                    if (searchQuery[1].indexOf("smd") != -1) {
                        var queryArray1 = searchQuery[1].split('=');
                        if (queryArray1[1].length == 10) {
                            $("#txtStatementDate").val(queryArray1[1]);
                        }
                    }
                }
                if (searchQuery.length > 2) {
                    if (searchQuery[2].indexOf("pId") != -1) {
                        var queryArray1 = searchQuery[2].split('=');
                        if (queryArray1[1].length != 41) {
                            $("#txtPaymentIdNew").val(queryArray1[1]);
                        }
                    }
                }
                $("#btnCancel").hide();
                if (searchQuery.length > 3) {
                    $("#btnCancel").show();
                }
               
            }

            $("#btnCancel").click(function () {
                var carrier = $("#ddlCarrier").val();
                var statementDate = $("#txtStatementDate option:selected").text();
                if (carrier == "") {
                    alert("please select partner");
                    return;
                }
                var paymentId = $("#txtPaymentId option:selected").text();
                window.location.href = window.location.origin + "/Commision/EditCommissions?carrierId=" + carrier + "&smd=" + statementDate + "&pId=" + paymentId + "&isCancel=true"
            });
            $("#btnSubmit").click(function () {
                var commisions = [];
                var isInvalidRow = false;
                $('#tblCommisions > tbody  > tr').each(function () {
                    if ($(this)[0].cells[0].childNodes[7] != undefined) {
                        var clientId = $(this)[0].cells[0].childNodes[1].value;
                        var policyid = $(this)[0].cells[0].childNodes[3].value;
                        //var coverageId = $(this)[0].cells[0].childNodes[5].value;
                        var clientPolicyId = $(this)[0].cells[0].childNodes[7].value;
                        var carrierId = $(this)[0].cells[0].childNodes[11].value;
                        var ststus = $(this)[0].cells[0].childNodes[13].value;
                        var policyNo = $(this)[0].cells[0].childNodes[15].value;
                        var coverageId = $(this)[0].cells[3].childNodes[1].value;
                        var status = $(this)[0].cells[4].childNodes[1].value;
                        var commisionString = $(this)[0].cells[5].childNodes[1].value;
                        var commision = $(this)[0].cells[6].childNodes[1].value;
                        var appoliedDate = $(this)[0].cells[7].childNodes[1].value;
                        var paymntId = $("#txtPaymentIdNew").val();//$(this)[0].cells[7].childNodes[1].value;
                        var statementDate = $("#txtStatementDate").val();
                        if (commision != "" && commision != "0.00" && (statementDate == "" || paymntId == "")) {
                            isInvalidRow = true;
                        }

                        if (appoliedDate != "") {
                            var appDate = appoliedDate.split('/');
                            appoliedDate = appDate[0] + "/01/" + appDate[1];
                        }
                        var commision = {
                            "clientPolicyId": clientPolicyId,
                            "Status": status,
                            "CommisionString": commisionString,
                            "CommisionValue": commision,
                            "AppliedDate": appoliedDate,
                            "PaymentId": paymntId,
                            "StatementDate": statementDate,
                            "CarrierId": carrierId,
                            "PolicyNumber": policyNo,
                            "ClientId": clientId,
                            "CoverageId": coverageId,
                            "ProductId": status
                        }
                        commisions.push(commision);
                    }
                });
                if (isInvalidRow) {
                    alert('either of statement date, commission or payment id missied. please check');
                    return;
                }
                let host = window.location.origin;
                let path = window.location.pathname;
                var apiPath = host + path;
                var isProd = false;
                if (isProd) {
                    host = window.location.origin;
                    apiPath = host + "/IBS/Commision";
                }
                $.ajax({
                    type: "POST",
                    url: apiPath,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: JSON.stringify(commisions),
                    success: function (commisions) {
                        var carrier = $("#ddlCarrier").val();
                        window.location.href = window.location.origin + window.location.pathname
                            + "?carrierId=" + carrier + "&isSaved=true"
                    },
                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                        console.log(errorThrown);
                    }
                });
            });
        });
    </script>
}